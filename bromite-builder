#!/usr/bin/env bash

# Unofficial Strict Mode
set -euo pipefail
IFS=$'\n\t'

# User-defined Variables
ARCH_TYPES=('arm' 'arm64' 'x86' 'x64')
ARCH=${ARCH_TYPES[0]}
DARK_NAVBAR=
GN_ARGS=
OUTPUT_DIR="$(pwd)/out"
PATCHES_DIR=
NO_BROMITE_PATCHES=
NO_SKIP_PATCHES=
REVISION=
TARGET_TYPES=(
    'chrome_public_apk'
    'system_webview_apk')
TARGET=${TARGET_TYPES[0]}
UBUNTU_INSTALL_BUILD_DEPS=
UPSTREAM=
UPSTREAM_SHORT_HASH=

# Options
opts=(
    "-a, --arch=<arch> | Where <arch> is: $(echo "${ARCH_TYPES[@]}" \
        | sed -E "s/\s/, /g"). Defaults to $ARCH"
    "-g, --gn-args=<args> | Where <args> is a string of GN build arguments"
    "-o, --output-dir=<dir> | Where <dir> is a path to save the APK. Defaults to ./out"
    "-p, --patches-dir=<dir> | Where <dir> is a path to a directory containing custom patches" \
    "-t, --target=<target> | Where Ninja <target> is: $(echo "${TARGET_TYPES[@]}" \
        | sed -E "s/\s/, /g"). Defaults to $TARGET"
    "-r, --revision=<revision> | Where <revision> is a Bromite release tag. Defaults to latest release"
    "-u, --upstream=<commit-hash:=master> | Where <commit-hash> is a long-format git commit. Defaults to master's HEAD. When set, any Chromium tag can be assigned to <revision>"
    "--no-bromite-patches | Only apply patches from Bromite's chromium_patches_list.txt"
    "--no-skip-patches | Exit on failed patch attempts"
    "--dark-navbar | Prefer a dark navigation bar over a white one"
    "--ubuntu-install-build-deps | Run Chromium's build/install-build-deps-android.sh during fetch-sync"
    "-h, --help | Print help menu")

# Constants
DEFAULTS=('set-revision' 'fetch-sync' 'prepare' 'build')
CWD=$(cd "$( dirname "$0" )" && pwd)
BUILD_DIR=$CWD/build
BASE_URL="https://github.com/bromite/bromite"

# ENV
PYTHONPATH=${PYTHONPATH:-}

clean () {
    rm -rf "$BUILD_DIR/chromium/src/out"
}

set-revision () {
    local url
    local error_msg
    local latest

    [[ $UPSTREAM ]] \
        && UPSTREAM_SHORT_HASH=$(echo $([[ $UPSTREAM != master ]] \
                && echo $UPSTREAM \
                || git ls-remote "$BASE_URL.git" HEAD \
                    | awk '{print $1}') \
            | sed -E "s/^(.{7}).+/\1/") \
        && echo "Using Bromite git commit $UPSTREAM_SHORT_HASH"

    [[ $UPSTREAM ]] && [[ $REVISION ]] \
        && url="https://github.com/chromium/chromium/archive/$REVISION.tar.gz"

    [[ ! ${url:-} ]] \
        && url=$([[ $REVISION ]] \
            && echo "$BASE_URL/archive/$REVISION.tar.gz" \
            || echo "$BASE_URL/releases/latest")

    [[ $REVISION ]] \
        && error_msg="Error: Release v$REVISION not found" \
        || error_msg='Error: Latest Bromite release not found. Check your network connection and try again'

    [[ $(curl -Lso /dev/null -I -w "%{http_code}" "$url") != 200 ]] \
        && echo "$error_msg" \
        && exit 1

    if [[ ! $REVISION ]]; then
        latest=$(curl -Lso /dev/null -w '%{url_effective}' "$url")
        REVISION=${latest##*/}
    fi

    echo "Revision now set to $REVISION"
}

fetch-sync () {
    local url
    local tarname

    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"

    url=$([[ $UPSTREAM ]] \
        && echo "https://api.github.com/repos/bromite/bromite/tarball/$UPSTREAM" \
        || echo "$BASE_URL/archive/$REVISION.tar.gz")

    tarname=$([[ $UPSTREAM_SHORT_HASH ]] \
        && echo "bromite-$UPSTREAM_SHORT_HASH" \
        || echo "bromite-$REVISION")

    # Fetch & Extract Bromite
    echo "Fetching Bromite Archive"
    curl -Lso "$tarname.tar.gz" "$url"

    echo "Extracting Bromite Archive"
    tar -xf "$tarname.tar.gz"

    [[ $UPSTREAM_SHORT_HASH ]] \
        && rm -rf "$tarname" \
        && mv "bromite-$tarname" "$tarname"

    mkdir -p chromium
    cd chromium

    # Fetch & Sync Chromium
    echo "Fetching and Syncing Chromium"

    # Partial checkouts not supported, delete and start over (crbug.com/230691)
    [[ ! -e .gclient ]] || [[ ! -e .gclient_entries ]] || [[ ! -d .cipd ]] \
        && rm -rf ../chromium/{*,.g*,.c*} \
        && fetch --nohooks --no-history android

    # Use custom debloated gclient config
    cp -f "$CWD/.gclientconfig" .gclient

    # Enter chromium src root
    cd src

    # If "apt-get" command detected, use install-build-deps to bootstrap env
    # Also ensure jdk is installed, rather than depend on third_party/jdk
    # Requires root privileges and --ubuntu-install-build-deps flag
    [[ $(command -v apt-get) ]] \
        && [[ $UBUNTU_INSTALL_BUILD_DEPS ]] \
        && sudo ./build/install-build-deps-android.sh \
        && sudo apt-get -qq install default-jdk

    # Reset tree
    git clean -fdxq --exclude="out/Default_${REVISION}"

    echo 'y' | gclient sync --no-history --force --reset -r "$REVISION"
}

prepare () {
    local bromite_dir
    local bromite_src

    local patchlist_path
    local patchlist
    local patch_status

    local ungoogled_dir
    local ungoogled_domains_fallback=

    bromite_dir=$([[ $UPSTREAM_SHORT_HASH ]] \
        && echo "$BUILD_DIR/bromite-$UPSTREAM_SHORT_HASH" \
        || echo "$BUILD_DIR/bromite-$REVISION")

    [[ ! -d $BUILD_DIR/chromium/src ]] || [[ ! -d $bromite_dir ]] \
        && fetch-sync

    bromite_src=$([[ -d "$bromite_dir/build" ]] \
        && echo "$bromite_dir/build" \
        || echo "$bromite_dir")

    patchlist_path=$([[ $NO_BROMITE_PATCHES ]] \
        && echo "$bromite_src/chromium_patches_list.txt" \
        || echo "$bromite_src/bromite_patches_list.txt")

    # Legacy patches_list.txt path
    [[ ! -e $patchlist_path ]] \
        && [[ ! $NO_BROMITE_PATCHES ]] \
        && [[ -e "$bromite_src/patches_list.txt" ]] \
        && patchlist_path="$bromite_src/patches_list.txt"

    # Prep Patching
    rm -rf "$BUILD_DIR/patches"

    cp -rf "$bromite_src/patches" \
        "$BUILD_DIR/patches"

    [[ $DARK_NAVBAR ]] \
        && cp -f "$CWD/patches/Dark-Navbar.patch" \
            "$BUILD_DIR/patches"

    [[ $PATCHES_DIR ]] && [[ -d $PATCHES_DIR ]] \
        && cp -rf "$PATCHES_DIR/." \
            "$BUILD_DIR/patches"

    cd "$BUILD_DIR/chromium/src"

    # Copy Adblock Entries Header (legacy builds)
    [[ -e "$bromite_src/filters/adblock_entries.h" ]] \
        && cp -f "$bromite_src/filters/adblock_entries.h" \
            net/url_request

    # Patch List Order
    [[ -e $patchlist_path ]] \
        && patchlist=($(sed -e "s|^|$BUILD_DIR/patches/|g" \
            < "$patchlist_path")) \
        || patchlist=("$BUILD_DIR"/patches/*.patch)

    # Add custom patches to patchlist
    [[ $DARK_NAVBAR ]] \
        && patchlist+=("$BUILD_DIR/patches/Dark-Navbar.patch")

    if [[ $PATCHES_DIR ]] && [[ -d $PATCHES_DIR ]]; then
        for patchfile in "$PATCHES_DIR"/*.patch; do
            [[ ! -e "$bromite_src/patches/$(basename "$patchfile")" ]] \
                && patchlist+=("$patchfile")
        done
    fi

    # Apply Patches
    for patchfile in "${patchlist[@]}"; do
        patch_status=$(git apply --whitespace=nowarn --check "$patchfile" \
            &>/dev/null; \
            echo $?)

        [[ $patch_status -gt 0 ]] \
            && [[ ! $NO_SKIP_PATCHES ]] \
            && [[ "$patchfile" =~ domain-substitution.patch ]] \
            && ungoogled_domains_fallback=$patch_status \
            && continue

        [[ $patch_status -gt 0 ]] \
            && [[ ! $NO_SKIP_PATCHES ]] \
            && echo "Skipping, doesn't apply: $(basename "$patchfile")" \
            && continue

        echo "Applying patch: $(basename "$patchfile")"
        git apply --whitespace=nowarn "$patchfile"
    done

    [[ ! $ungoogled_domains_fallback ]] \
        && return

    # Domain Substitution Fallback via Ungoogled
    echo "Applying Ungoogled Chromium's domain substitutions"
    ungoogled_dir="$CWD/.bin/ungoogled-chromium"
    rm -f "$ungoogled_dir/build/domainsubcache.tar.gz"

    domain_substitution --quiet apply \
        -r "$ungoogled_dir/domain_regex.list" \
        -f "$ungoogled_dir/domain_substitution.list" \
        -c "$ungoogled_dir/build/domainsubcache.tar.gz" \
        ./
}

build () {
    local bromite_dir
    local bromite_src

    local gn_args_bromite
    local gn_args_user_arr
    local gn_args

    local output_apk_basename
    local apk_basename

    [[ ! -d $BUILD_DIR/chromium/src ]] \
        && fetch-sync \
        && prepare

    # V8 Compiler Optimization Workaround | https://crbug.com/942497
    sed -i 's|"-O0"|"-O2"|g' \
        "$BUILD_DIR/chromium/src/build/config/compiler/BUILD.gn"

    bromite_dir=$([[ $UPSTREAM_SHORT_HASH ]] \
        && echo "$BUILD_DIR/bromite-$UPSTREAM_SHORT_HASH" \
        || echo "$BUILD_DIR/bromite-$REVISION")

    bromite_src=$([[ -d "$bromite_dir/build" ]] \
        && echo "$bromite_dir/build" \
        || echo "$bromite_dir")

    cd "$BUILD_DIR/chromium/src"
    export CHROMIUM_OUTPUT_DIR="out/Default_${REVISION}"
    mkdir -p "$CHROMIUM_OUTPUT_DIR"

    # Get Bromite GN Args if they exist
    [[ -e $bromite_src/GN_ARGS ]] \
        && gn_args_bromite="$(
            sed -E "s/^(blink_)*symbol_level\=.+//g" \
                < "$bromite_src"/GN_ARGS \
            | tr "\n" " ")" \
        || gn_args_bromite=''

    # Combine Arch & Bromite GN args
    gn_args="target_cpu=\"$ARCH\" ${gn_args_bromite}"

    # Set default Bromite-Builder GN args for quicker builds
    gn_args+=" blink_symbol_level=0"
    gn_args+=" enable_resource_allowlist_generation=false"
    gn_args+=" symbol_level=0"
    gn_args+=" treat_warnings_as_errors=false"

    # Cast user GN args to array
    gn_args_user_arr=($(echo $GN_ARGS | tr " " "\n"))

    # Update GN args with user-defined args taking priority
    for arg in "${gn_args_user_arr[@]}"; do
        local arg_key
        arg_key=$(echo "$arg" | sed -E 's/=.+//')

        [[ $arg_key == 'target_cpu' ]] \
            && continue

        [[ $(echo "$gn_args" | grep "$arg_key=") ]] \
            && gn_args=$(echo "$gn_args" \
                | sed -E "s/\\s$arg_key=\\S+/ $arg/g") \
            || gn_args="${gn_args} ${arg}"
    done

    # Normalize Whitespace
    gn_args=$(echo "$gn_args" \
        | sed -E 's/\s+/ /g' \
        | sed -E 's/\s+=\s+/=/g')

    # Build
    gn gen "--args=$gn_args" "$CHROMIUM_OUTPUT_DIR"
    autoninja -C "$CHROMIUM_OUTPUT_DIR" "$TARGET"

    # Prep output dir
    mkdir -p "$OUTPUT_DIR"

    # Generated APK
    apk_basename=$(echo "$TARGET" \
        | sed -e 's|_apk||g' \
        | sed -e 's/\(web\)\(view\)/\1_\2/' \
        | sed -e 's/^./\U&/' \
        | sed -e 's/_./\U&/g' \
        | sed -e 's/_//g')

    # Renamed APK
    [[ $DARK_NAVBAR ]] \
        && output_apk_basename="$apk_basename-DarkNavbar" \
        || output_apk_basename="$apk_basename"

    output_apk_basename="$output_apk_basename-$REVISION-$ARCH"

    # Copy to output dir
    cp -f "$CHROMIUM_OUTPUT_DIR/apks/$apk_basename.apk" \
        "$OUTPUT_DIR/$output_apk_basename.apk"

    echo "Successfully built to $OUTPUT_DIR/$output_apk_basename.apk"
}

_setopts () {
    # Cast args to array for easier parsing
    local args_arr=()

    for arg in $*; do
        [[ ! $arg =~ (--[a-z|-]+)= ]] \
            && args_arr+=("$arg") \
            && continue

        local arg_key
        local arg_value

        arg_key=$(echo "$arg" | sed -E 's/=.+//')
        arg_value=$(echo "$arg" | sed -E "s/$arg_key=//")

        args_arr+=("$arg_key")
        args_arr+=("$arg_value")
    done;

    # Iterate options and assign var values to CLI args
    for opt in "${opts[@]}"; do
        [[ $opt =~ '-h, --help' ]] \
            && continue

        local opt_arr=($(echo "$opt" \
            | sed -E "s/\s*\|.+//g" \
            | sed -E "s/=<.+>//g" \
            | tr ", " "\n"))

        [[ ${#opt_arr[@]} != 2 ]] \
            && opt_arr+=("${opt_arr[0]}")

        local opt_var
        local opt_var_types
        local arg_next
        local idx=0

        opt_var=$(echo "${opt_arr[1]}" \
            | sed -E "s/^--//g" \
            | sed -E "s/\W/_/g" \
            | tr '[a-z]' '[A-Z]')

        opt_var_types=${opt_var}_TYPES[@]

        for arg in "${args_arr[@]}"; do
            case $arg in
                ${opt_arr[0]}|${opt_arr[1]})
                    arg_next=${args_arr[$idx + 1]:-}

                    # Boolean opts
                    [[ ! $opt =~ \=\<.+\> ]] \
                        && export "$opt_var=1" \
                        && continue

                    # Flags that need to fallback to default values
                    [[ $opt =~ \=\<.+:\=.+\> ]] \
                            && [[ ${arg_next::1} == '-' || ! $arg_next ]] \
                        && export "$opt_var=$(echo "$opt" \
                            | sed -E "s/\s*\|.+//g" \
                            | sed -E "s/.+\<.+:\=([^\>]+).+/\1/")" \
                        && continue

                    # Flags with custom or type-specific values
                    [[ ! ${!opt_var_types:-} ]] \
                            || [[ $(printf "%s\n" ${!opt_var_types} \
                                | grep -n "^${args_arr[$idx + 1]}$") ]] \
                        && export "$opt_var=${args_arr[$idx + 1]}"
                    ;;
            esac

            idx=$(( "$idx" + 1 ))
        done
    done
}

_localpatches () {
    local patches_dir_msg
    local patches_dir_abspath
    local patches_dirname

    # No patches directory set, return
    [[ ! $PATCHES_DIR ]] \
        && return

    patches_dir_msg="Patches directory \"$PATCHES_DIR\" not found. Skipping"

    # Patches directory absolute path and exists, return
    if [[ $PATCHES_DIR = /* ]]; then
        [[ ! -d $PATCHES_DIR ]] \
            && echo "$patches_dir_msg" \
            && export PATCHES_DIR=
        return
    fi

    # Patches directory relative, update to absolute
    patches_dir_abspath=$(cd "$( dirname "$PATCHES_DIR" )" && pwd)
    patches_dirname=$(basename $PATCHES_DIR)

    [[ ! -d "$patches_dir_abspath/$patches_dirname" ]] \
        && echo "$patches_dir_msg" \
        && export PATCHES_DIR= \
        && return

    export PATCHES_DIR="$patches_dir_abspath/$patches_dirname"
}

_localbin () {
    local python_v
    local protobuf_repo
    local protoc_javalite_bin

    mkdir -p "$CWD/.bin"

    # Depot Tools
    [[ ! -d $CWD/.bin/depot_tools ]] \
        && cd "$CWD/.bin" \
        && echo "Fetching Depot Tools" \
        && git clone -q https://chromium.googlesource.com/chromium/tools/depot_tools.git

    cd "$CWD/.bin/depot_tools"
    git checkout master -q
    git pull -q

    export PATH=$CWD/.bin:$CWD/.bin/depot_tools:$PATH
    export PYTHONPATH="$CWD/.bin/depot_tools/third_party:$PYTHONPATH"

    # Use Python 2
    python_v=$(python --version \
        | sed "s|[a-z]\s*||ig" \
        | cut -d '.' -f 1)

    [[ $python_v != 2 ]] \
        && [[ $(command -v python2) ]] \
        && ln -sf "$(command -v python2)" "$CWD/.bin/python"

    # Ensure 64 bit protobuf-gen-javalite is available in PATH
    # Can remove after issue is resolved https://crbug.com/988512
    # TODO: Remove and build binaries from source
    protobuf_repo=https://repo1.maven.org/maven2/com/google/protobuf
    protoc_javalite_bin=protoc-gen-javalite-3.0.0-linux-x86_64.exe

    [[ $(uname -m) == x86_64 ]] \
        && [[ ! -e "$CWD/.bin/protobuf-gen-javalite" ]] \
        && curl -s "$protobuf_repo/protoc-gen-javalite/3.0.0/$protoc_javalite_bin" \
            -o "$CWD/.bin/protoc-gen-javalite" \
        && chmod 755 "$CWD/.bin/protoc-gen-javalite"

    # Ungoogled Chromium
    [[ ! -d $CWD/.bin/ungoogled-chromium ]] \
        && cd "$CWD/.bin" \
        && echo "Fetching Ungoogled Chromium" \
        && git clone -q https://github.com/Eloston/ungoogled-chromium.git

    cd "$CWD/.bin/ungoogled-chromium"
    git checkout master -q
    git pull -q

    mkdir -p "$CWD/.bin/ungoogled-chromium/build"

    ln -sf "$CWD/.bin/ungoogled-chromium/utils/domain_substitution.py" \
        "$CWD/.bin/domain_substitution"
}

_getcmds () {
    echo $(typeset -f \
        | awk '/ \(\) $/ && !/^(main) / {print $1}' \
        | sed -E "s/(_.+\s*)//g")
}

_help () {
cat <<HEREDOC
Usage: ${0} [command...] [options...]

Where optional [command] is one of:
  $(_getcmds | sed -E "s/\s/, /g")

If no [command] is set, the default command sequence will be executed:
$(printf "  - %s\n" "${DEFAULTS[@]}")

Options:$(printf "\n  %s\n" "${opts[@]}" \
    | sed -E "s/(\<.+):\=[^\>]*(>)/\1\2/g" \
    | sed -E "s/\s\|\s/\n    /g" \
    | sed -E "s/\.\s/.\n    /g")

HEREDOC
}

main () {
    # Help Menu
    [[ $(echo "$@") == -h ]] || [[ $(echo "$@") == --help ]] \
        && _help \
        && return

    # Set Options
    _setopts "$@"

    # Setup custom patches dir
    _localpatches

    # Setup Local bin
    _localbin

    # Detect if 1st param of args is a valid function
    if [[ ${1:-} ]] && [[ $(_getcmds) =~ $1 ]]; then
        [[ $1 != 'set-revision' ]] && [[ $1 != 'clean' ]] \
            && set-revision
        $1
        return
    fi

    # No command detected, run default sequence
    for cmd in "${DEFAULTS[@]}"; do
        eval "$cmd"
    done
}

# Entry Function
main "$@"
